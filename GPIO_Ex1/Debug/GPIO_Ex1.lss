
GPIO_Ex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000450  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006f5  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
void setBit(unsigned char *x, unsigned char bitNumber);
void clearBit(unsigned char *x, unsigned char bitNumber);
void toggleBit(unsigned char *x, unsigned char bitNumber);
unsigned char checkBit(unsigned char *x,unsigned char bitNumber);

int main(void) {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	setBit(&DDRC, DDC1); //seting the pin zero as output pin
  74:	84 e3       	ldi	r24, 0x34	; 52
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	61 e0       	ldi	r22, 0x01	; 1
  7a:	0e 94 5c 00 	call	0xb8	; 0xb8 <setBit>
	clearBit(&PORTC, PC1); // initial output to be zero
  7e:	85 e3       	ldi	r24, 0x35	; 53
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	0e 94 7e 00 	call	0xfc	; 0xfc <clearBit>
	clearBit(&DDRD,DDD2);// setting the second pin to be input pin
  88:	81 e3       	ldi	r24, 0x31	; 49
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	0e 94 7e 00 	call	0xfc	; 0xfc <clearBit>

	while (1) {
		if(!checkBit(&PIND,PIND2)){
  92:	80 e3       	ldi	r24, 0x30	; 48
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	62 e0       	ldi	r22, 0x02	; 2
  98:	0e 94 c3 00 	call	0x186	; 0x186 <checkBit>
  9c:	88 23       	and	r24, r24
  9e:	31 f4       	brne	.+12     	; 0xac <main+0x40>
			setBit(&PORTC, PC1);
  a0:	85 e3       	ldi	r24, 0x35	; 53
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	0e 94 5c 00 	call	0xb8	; 0xb8 <setBit>
  aa:	f3 cf       	rjmp	.-26     	; 0x92 <main+0x26>
		}
		else{
			clearBit(&PORTC, PC1);
  ac:	85 e3       	ldi	r24, 0x35	; 53
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	0e 94 7e 00 	call	0xfc	; 0xfc <clearBit>
  b6:	ed cf       	rjmp	.-38     	; 0x92 <main+0x26>

000000b8 <setBit>:
		}
	}
}
void setBit(unsigned char *x, unsigned char bitNumber){
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	00 d0       	rcall	.+0      	; 0xbe <setBit+0x6>
  be:	0f 92       	push	r0
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	9a 83       	std	Y+2, r25	; 0x02
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	6b 83       	std	Y+3, r22	; 0x03
	(*x)|=(1<<bitNumber);
  ca:	e9 81       	ldd	r30, Y+1	; 0x01
  cc:	fa 81       	ldd	r31, Y+2	; 0x02
  ce:	80 81       	ld	r24, Z
  d0:	48 2f       	mov	r20, r24
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 2e       	mov	r0, r18
  de:	02 c0       	rjmp	.+4      	; 0xe4 <setBit+0x2c>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <setBit+0x28>
  e8:	84 2b       	or	r24, r20
  ea:	e9 81       	ldd	r30, Y+1	; 0x01
  ec:	fa 81       	ldd	r31, Y+2	; 0x02
  ee:	80 83       	st	Z, r24
}
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <clearBit>:

void clearBit(unsigned char *x, unsigned char bitNumber){
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	00 d0       	rcall	.+0      	; 0x102 <clearBit+0x6>
 102:	0f 92       	push	r0
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01
 10c:	6b 83       	std	Y+3, r22	; 0x03
	(*x)&=~(1<<bitNumber);
 10e:	e9 81       	ldd	r30, Y+1	; 0x01
 110:	fa 81       	ldd	r31, Y+2	; 0x02
 112:	80 81       	ld	r24, Z
 114:	48 2f       	mov	r20, r24
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <clearBit+0x2c>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <clearBit+0x28>
 12c:	80 95       	com	r24
 12e:	84 23       	and	r24, r20
 130:	e9 81       	ldd	r30, Y+1	; 0x01
 132:	fa 81       	ldd	r31, Y+2	; 0x02
 134:	80 83       	st	Z, r24
}
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	cf 91       	pop	r28
 13e:	df 91       	pop	r29
 140:	08 95       	ret

00000142 <toggleBit>:
void toggleBit(unsigned char *x, unsigned char bitNumber){
 142:	df 93       	push	r29
 144:	cf 93       	push	r28
 146:	00 d0       	rcall	.+0      	; 0x148 <toggleBit+0x6>
 148:	0f 92       	push	r0
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	9a 83       	std	Y+2, r25	; 0x02
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	6b 83       	std	Y+3, r22	; 0x03
	(*x)^=(1<<bitNumber);
 154:	e9 81       	ldd	r30, Y+1	; 0x01
 156:	fa 81       	ldd	r31, Y+2	; 0x02
 158:	80 81       	ld	r24, Z
 15a:	48 2f       	mov	r20, r24
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	28 2f       	mov	r18, r24
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 2e       	mov	r0, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <toggleBit+0x2c>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <toggleBit+0x28>
 172:	84 27       	eor	r24, r20
 174:	e9 81       	ldd	r30, Y+1	; 0x01
 176:	fa 81       	ldd	r31, Y+2	; 0x02
 178:	80 83       	st	Z, r24
}
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	08 95       	ret

00000186 <checkBit>:
unsigned char checkBit(unsigned char *x,unsigned char bitNumber){
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	00 d0       	rcall	.+0      	; 0x18c <checkBit+0x6>
 18c:	0f 92       	push	r0
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	9a 83       	std	Y+2, r25	; 0x02
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	6b 83       	std	Y+3, r22	; 0x03
	return (*x)&(1<<bitNumber);
 198:	e9 81       	ldd	r30, Y+1	; 0x01
 19a:	fa 81       	ldd	r31, Y+2	; 0x02
 19c:	80 81       	ld	r24, Z
 19e:	48 2f       	mov	r20, r24
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	28 2f       	mov	r18, r24
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 2e       	mov	r0, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <checkBit+0x2c>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	0a 94       	dec	r0
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <checkBit+0x28>
 1b6:	84 23       	and	r24, r20
}
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	cf 91       	pop	r28
 1c0:	df 91       	pop	r29
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
